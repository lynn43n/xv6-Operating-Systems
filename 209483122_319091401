diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..691a8f6
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.errorSquiggles": "Disabled"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 09d790c..ec8e2b8 100644
--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,7 @@ OBJS = \
 	file.o\
 	fs.o\
 	ide.o\
+	inject_call.o\
 	ioapic.o\
 	kalloc.o\
 	kbd.o\
@@ -168,6 +169,8 @@ mkfs: mkfs.c fs.h
 UPROGS=\
 	_cat\
 	_echo\
+	_sanity1\
+	_sanity2\
 	_forktest\
 	_grep\
 	_init\
@@ -248,7 +251,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c sanity1.c sanity2.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..a84d068 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct sigaction;
 
 // bio.c
 void            binit(void);
@@ -107,7 +108,7 @@ int             cpuid(void);
 void            exit(void);
 int             fork(void);
 int             growproc(int);
-int             kill(int);
+int             kill(int, int);
 struct cpu*     mycpu(void);
 struct proc*    myproc();
 void            pinit(void);
@@ -120,7 +121,12 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+uint            sigprocmask(uint sigmask);
+int             sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
+void            sigret(void);
 
+void            injected_call_beginning(void);
+void            injected_call_end(void);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff --git a/exec.c b/exec.c
index b40134f..dc2cac3 100644
--- a/exec.c
+++ b/exec.c
@@ -18,6 +18,7 @@ exec(char *path, char **argv)
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
+  
 
   begin_op();
 
@@ -99,6 +100,15 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+
+  int j;
+  for(j=0;j<32;j++){ 
+    if((int)curproc->signal_handlers[j]->sa_handler>1){
+      curproc->signal_handlers[j]->sa_handler=(void*)SIG_DFL;
+      curproc->signal_handlers[j]->sigmask=0;
+    }
+   }
+   
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff --git a/init.c b/init.c
index 046b551..5595a58 100644
--- a/init.c
+++ b/init.c
@@ -10,6 +10,7 @@ char *argv[] = { "sh", 0 };
 int
 main(void)
 {
+  printf(1, "in main");
   int pid, wpid;
 
   if(open("console", O_RDWR) < 0){
diff --git a/inject_call.S b/inject_call.S
new file mode 100644
index 0000000..05e7f9f
--- /dev/null
+++ b/inject_call.S
@@ -0,0 +1,13 @@
+#include "traps.h"
+#include "syscall.h"
+
+
+
+.globl injected_call_beginning
+.globl injected_call_end
+
+
+injected_call_beginning: #this lets me save the address of the beginning of the call that I want to later inject
+    movl $SYS_sigret, %eax
+    int $T_SYSCALL
+injected_call_end:  #this lets me save the address of the beginning of the call that I want to later inject
\ No newline at end of file
diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..3c1cbd6 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -48,8 +48,9 @@ freerange(void *vstart, void *vend)
 {
   char *p;
   p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE){
     kfree(p);
+  }
 }
 //PAGEBREAK: 21
 // Free the page of physical memory pointed at by v,
@@ -66,7 +67,6 @@ kfree(char *v)
 
   // Fill with junk to catch dangling refs.
   memset(v, 1, PGSIZE);
-
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = (struct run*)v;
diff --git a/kill.c b/kill.c
index 364f6af..1856c09 100644
--- a/kill.c
+++ b/kill.c
@@ -5,13 +5,11 @@
 int
 main(int argc, char **argv)
 {
-  int i;
-
-  if(argc < 2){
-    printf(2, "usage: kill pid...\n");
+  if(argc < 3){
+    printf(2, "usage: kill pid signum...\n");
     exit();
   }
-  for(i=1; i<argc; i++)
-    kill(atoi(argv[i]));
+  
+    kill(atoi(argv[1]),atoi(argv[2]));
   exit();
 }
diff --git a/proc.c b/proc.c
index d3c8b17..33eaf11 100644
--- a/proc.c
+++ b/proc.c
@@ -7,7 +7,8 @@
 #include "proc.h"
 #include "spinlock.h"
 
-struct {
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -20,32 +21,32 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +55,9 @@ mycpu(void)
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -65,16 +67,17 @@ myproc(void) {
   return p;
 }
 
-
-
-
-int 
-allocpid(void) 
+int allocpid(void)
 {
   int pid;
-  acquire(&ptable.lock);
-  pid = nextpid++;
-  release(&ptable.lock);
+  // acquire(&ptable.lock);
+  // pid = nextpid++;
+  // release(&ptable.lock);
+  do
+  {
+    pid = nextpid;
+
+  } while (!cas(&nextpid, pid, pid + 1));
   return pid;
 }
 
@@ -83,29 +86,48 @@ allocpid(void)
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
   char *sp;
+  //acquire(&ptable.lock);
+  //for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  //  if(p->state == UNUSED)
+  //    goto found;
+  //release(&ptable.lock);
 
-  acquire(&ptable.lock);
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
+  pushcli();
+  do
+  {
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+      if (p->state == UNUSED)
+        break;
+    if (p == &ptable.proc[NPROC])
+    { // if true, it means that the ptable is full and there is nothing we can do
+      popcli();
+      return 0;
+    }
+  } while (!cas(&p->state, UNUSED, EMBRYO)); //changing the state,but in an atomic way
+  popcli();
 
-  release(&ptable.lock);
-  return 0;
+  //return 0;
 
-found:
-  p->state = EMBRYO;
-  release(&ptable.lock);
+  //found:
+  //p->state = EMBRYO;
+  //release(&ptable.lock);
 
   p->pid = allocpid();
+  //int i;
+  //for (i = 0; i < 32; i++)
+  //{
+    //p->signal_handlers[i]->sa_handler = (void *)SIG_DFL;
+    //p->signal_handlers[i]->sigmask = 0;
+  //}
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -113,36 +135,40 @@ found:
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
+
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
-
+  for(int k = 0; k<32; k++){// allocating space for the new fields and initializing them
+    sp -= (sizeof (struct sigaction *));
+    p->signal_handlers[31-k] = (struct sigaction *)sp;
+  }
+  for(int k = 0; k<32; k++){
+    p->signal_handlers[k]->sa_handler = (void *) SIG_DFL;
+    p->signal_handlers[k]->sigmask = 0;
+  }
   return p;
 }
 
-
-
-
 //PAGEBREAK: 32
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -153,36 +179,48 @@ userinit(void)
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
-
+  p->tf->eip = 0; // beginning of initcode.S
+  
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
   // this assignment to p->state lets other cores
   // run this process. the acquire forces the above
   // writes to be visible, and the lock is also needed
   // because the assignment might not be atomic.
-  acquire(&ptable.lock);
 
-  p->state = RUNNABLE;
+  /////////Assignment2//////////////////
+  pushcli();
+  p->stopped = 0;
+  p->killed = 0;
+  p->pending_signals = 0;
+  p->signal_mask = 0;
+  p->userspace_trapframe_backup = 0;
+  for (int i = 0; i < 32; i++)
+  {
+    p->signal_handlers[i]->sa_handler = (void *)SIG_DFL;
+    p->signal_handlers[i]->sigmask = 0;
+  }
 
-  release(&ptable.lock);
+  p->state = RUNNABLE; //now, the proccess is ready
+  popcli();
 }
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -193,23 +231,26 @@ growproc(int n)
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
+    pushcli();
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
+    popcli();
     return -1;
   }
   np->sz = curproc->sz;
@@ -219,20 +260,29 @@ fork(void)
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
 
   pid = np->pid;
+  int j;
+  for (j = 0; j < 32; j++)
+  {
+    np->signal_handlers[j] = curproc->signal_handlers[j];
+  }
+  np->signal_mask = curproc->signal_mask;
+  np->pending_signals = 0;
 
-  acquire(&ptable.lock);
-
-  np->state = RUNNABLE;
+  //acquire(&ptable.lock);
+  pushcli();
+  cas(&np->state, EMBRYO, RUNNABLE);
+  popcli();
+  //np->state = RUNNABLE;
 
-  release(&ptable.lock);
+  //release(&ptable.lock);
 
   return pid;
 }
@@ -240,19 +290,20 @@ fork(void)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -263,44 +314,60 @@ exit(void)
   end_op();
   curproc->cwd = 0;
 
-  acquire(&ptable.lock);
+  //acquire(&ptable.lock);
+  pushcli();
+  if(!cas(&curproc->state, RUNNING, NEG_ZOMBIE)){
+    panic("in exit: cas has failed");
+  }
 
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
+    // Parent might be sleeping in wait().
+    wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if(p->state == ZOMBIE || p->state == NEG_ZOMBIE)
         wakeup1(initproc);
     }
   }
-
+ 
   // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
   sched();
   panic("zombie exit");
+   popcli();
 }
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+
+int wait(void)
 {
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
-  acquire(&ptable.lock);
-  for(;;){
+
+  //acquire(&ptable.lock);
+  pushcli();
+  for (;;)
+  {
+    if(!cas(&curproc->state, RUNNING, NEG_SLEEPING)){
+      panic("at wait: cas has faiiled");
+    }
+    
+    
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    curproc->chan = curproc;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (cas(&p->state, ZOMBIE, UNUSED))
+      {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -310,20 +377,31 @@ wait(void)
         p->parent = 0;
         p->name[0] = 0;
         p->killed = 0;
-        p->state = UNUSED;
-        release(&ptable.lock);
+        
+        curproc->chan=0;
+        cas(&curproc->state, NEG_SLEEPING, RUNNING);//we need to change it, only once
+        //release(&ptable.lock);
+        cas((&p->state), NEG_UNUSED, UNUSED);
+        popcli();
         return pid;
       }
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
-      release(&ptable.lock);
+    if (!havekids || curproc->killed)
+    {
+      //release(&ptable.lock);
+      curproc->chan=0;
+      if(!cas(&curproc->state, NEG_SLEEPING, RUNNING)){
+        panic("at wait: couldn't switch from -SLEEPING to RUNNING");
+      }
+      popcli();
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    //sleep(curproc, &ptable.lock); //DOC: wait-sleep
+    sched();
   }
 }
 
@@ -335,40 +413,52 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    //acquire(&ptable.lock);
+    pushcli();
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (!cas(&(p->state), RUNNABLE, NEG_RUNNING)) //if we couldnt change it's state
         continue;
-
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
+      cas(&(p->state), NEG_RUNNING, RUNNING);
       switchuvm(p);
-      p->state = RUNNING;
-
       swtch(&(c->scheduler), p->context);
       switchkvm();
-
+      cas(&(p->state), NEG_RUNNABLE, RUNNABLE);
       // Process is done running for now.
       // It should have changed its p->state before coming back.
+
+      //here we are going to use all the negative states, in order to make sure that everything (the memory, etc..) is ready for the next one (because wwe are not locking the ptable now)
+      if (cas(&(p->state), NEG_SLEEPING, SLEEPING))
+        if (p->killed == 1)
+          cas(&(p->state), SLEEPING, RUNNABLE);
+
+      cas(&(p->state), NEG_RUNNABLE, RUNNABLE);
+
+      if (cas(&(p->state), NEG_ZOMBIE, ZOMBIE))
+        wakeup1(p->parent);
+      
       c->proc = 0;
     }
-    release(&ptable.lock);
-
+    //release(&ptable.lock);
+    popcli();
   }
+  cprintf("sched4");
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -378,19 +468,18 @@ scheduler(void)
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
-    panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  //if (!holding(&ptable.lock))
+    //panic("sched ptable.lock");
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -398,25 +487,29 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
+  struct proc *curproc = myproc();
+  //acquire(ptable.lock);
+  pushcli();
+  if (!cas(&curproc->state, RUNNING, NEG_RUNNABLE))
+    panic("In yield: the cas has failed");
   sched();
-  release(&ptable.lock);
+  //release(&ptable.lock);
+  popcli();
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
+  //release(&ptable.lock);
+  popcli();
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -430,15 +523,14 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -447,26 +539,35 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
-    release(lk);
-  }
+  //if (lk != &ptable.lock)
+  //{                        //DOC: sleeplock0
+    //acquire(&ptable.lock); //DOC: sleeplock1
+  
+  //}
+  pushcli();
+  
   // Go to sleep.
+  
+  //p->state = SLEEPING;
+  if(!cas(&p->state, RUNNING, NEG_SLEEPING))
+    panic("in sleep: cas failed");
+  release(lk);
   p->chan = chan;
-  p->state = SLEEPING;
-
   sched();
-
+  
   // Tidy up.
-  p->chan = 0;
+  p->chan=0;
+  //p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-    release(&ptable.lock);
-    acquire(lk);
-  }
+  //if (lk != &ptable.lock)
+  //{ //DOC: sleeplock2
+    //release(&ptable.lock);
+  //}
+  popcli();
+  acquire(lk);
 }
-
+         
 //PAGEBREAK!
 // Wake up all processes sleeping on chan.
 // The ptable lock must be held.
@@ -474,41 +575,85 @@ static void
 wakeup1(void *chan)
 {
   struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
+  pushcli();
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    while(p->state == NEG_SLEEPING){}//waiting for this state to change
+    if (p->state == SLEEPING && p->chan == chan){
+        if(cas(&p->state, SLEEPING, NEG_RUNNABLE)){
+          p->chan=0;
+          if(!cas(&p->state, NEG_RUNNABLE, RUNNABLE))
+            panic("at waikup1: second cas has failed");
+        }
+    }
+  }
+  popcli();
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
-  acquire(&ptable.lock);
+  //acquire(&ptable.lock);
+  pushcli();
   wakeup1(chan);
-  release(&ptable.lock);
+  //release(&ptable.lock);
+  popcli();
 }
 
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid, int signum)
 {
   struct proc *p;
 
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
-      p->killed = 1;
+  pushcli(); // preventing interruptions
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
+      switch (signum)
+      { //checking the special signals options
+      case SIGKILL:
+        p->killed = 1;
+        cas(&p->state, SLEEPING, RUNNABLE);
+        popcli();
+        return 0;
+
+      case SIGSTOP:
+        p->stopped = 1;
+        //cas(&p->state, SLEEPING, RUNNABLE);
+        popcli();
+        return 0;
+
+      case SIGCONT:
+        if (p->stopped == 1)
+        {
+          p->pending_signals = p->pending_signals | (1 << (32 - signum));
+          popcli();
+          return 0;
+        }
+        popcli();  //the 'else' case
+        return -1; // continue was sent but the proccess is not pn stopped
+
+      default:
+        cprintf("hi\n");
+        p->pending_signals = p->pending_signals | (1 << (32 - signum));
+        popcli();
+        return 0;
+      }
+
+      //p->pending_signals = p->pending_signals | 1 << (32 - signum);
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
-      release(&ptable.lock);
-      return 0;
+      //if (p->state == SLEEPING && (signum == SIGKILL || signum == SIGSTOP))
+        //p->state = RUNNABLE;
+      //release(&ptable.lock);
+      //return 0;
     }
   }
-  release(&ptable.lock);
+  cprintf("hi2\n");
+  //release(&ptable.lock);
+  popcli();
   return -1;
 }
 
@@ -516,35 +661,165 @@ kill(int pid)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
   }
 }
+
+int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)
+{
+  struct proc *p = myproc();
+  if (oldact != null)
+  {
+    oldact->sa_handler = p->signal_handlers[signum - 1]->sa_handler;
+    oldact->sigmask = p->signal_handlers[signum - 1]->sigmask;
+  }
+  if (act->sigmask <= 0)
+    return -1;
+
+  p->signal_handlers[signum - 1]->sa_handler = act->sa_handler;
+  p->signal_handlers[signum - 1]->sigmask = act->sigmask;
+  return 0;
+}
+
+void checkS(struct trapframe *trap_frame)
+{
+  struct proc *curproc = myproc();
+  
+  if(curproc == 0){
+    //cprintf("first if\n");
+    return;
+  }
+
+  if(curproc->pending_signals == 0)
+    return;
+
+  if(((trap_frame->cs & 3) != DPL_USER)){
+      return;
+  }
+  if (curproc->stopped)
+  {
+    for (;;)
+    {
+      if(curproc->killed)
+        exit();
+      uint cont = (1 << (32 - SIGCONT));
+      int is_pending = curproc->pending_signals & cont; //check if continue's bit is on or not
+
+      if (is_pending)
+      {
+        pushcli(); //for interrupts
+        if (cas(&curproc->stopped, 1, 0))
+        {                                                                              // it has to be with cas in the if, they have to be updated together
+          curproc->pending_signals = curproc->pending_signals ^ (1 << (32 - SIGCONT)); // to turn off the continue bit
+        }
+        popcli();
+        break;
+      }
+      else
+      {
+        yield(); // didn't get cont yet, give back the cpu time
+      }
+    }
+  }
+
+
+  if (curproc->stopped)
+  { // should I remove it? is it actually neccessary?
+    return;
+  }
+
+  for (int i = 1; i <= 32; i++)
+  {
+    int pending = (curproc->pending_signals & (1 << (32 - i)));
+
+    if (!pending || ((curproc->signal_mask) & (1 << (32 - i)))) //this proccess is not pending or should be ignored (the second option is to check if the bit in the mask is on or not)
+      continue;
+
+    curproc->pending_signals = curproc->pending_signals ^ (1 << (32 - i));
+
+    if (curproc->signal_handlers[i - 1]->sa_handler == (void *)SIG_IGN)
+    {                                                                              //pretty straight forward
+      curproc->pending_signals = curproc->pending_signals ^ (1 << (32 - i)); //discard the bit
+      continue;
+    }
+    if (curproc->signal_handlers[i - 1]->sa_handler == (void *)SIGCONT)
+    {
+      continue;
+    }
+    if (curproc->signal_handlers[i - 1]->sa_handler == (void *)SIG_DFL || curproc->signal_handlers[i - 1]->sa_handler == (void *)SIGKILL)
+    {                              // as stated in the assignment
+      kill(curproc->pid, SIGKILL); //
+      continue;
+    }
+
+    //////////USER-SPACE HANDLERS////////////////
+    curproc->signal_mask_backup = sigprocmask(curproc->signal_handlers[i]->sigmask); // updating the mask while keeping a copy of the old one (preventing support of nested user-level signal handling)
+
+    // if((trap_frame->cs & 3) == DPL_USER){// checks the privilage or something, to see if we are in user space or otherwise (nested user signals)
+    // pushcli();//for interrupts
+    // if(cas(&curproc->))
+    //}
+    curproc->tf->esp -= sizeof(struct trapframe);                               // reserve space in the stack for the backup we are about to create
+    memmove((void *)(curproc->tf->esp), curproc->tf, sizeof(struct trapframe)); //copy the trapframe into the reserved space in the stack
+    curproc->userspace_trapframe_backup = (void *)(curproc->tf->esp);           //esp now points at the beginning of the backup we copied into the stack
+
+    uint call_size = (uint)&injected_call_end - (uint)&injected_call_beginning; // with these we can find the size of the call to sigret that we want to push into the stack (return address). variables can be found in the 'injected_call.S' file
+    curproc->tf->esp -= call_size;                                              //reserving space in stack
+    memmove((void *)(curproc->tf->esp), injected_call_beginning, call_size);    //injecting call into the stack
+
+    *((int *)(curproc->tf->esp - 4)) = i;                // pushing the first parameter- signum
+    *((int *)(curproc->tf->esp - 8)) = curproc->tf->esp; //the return address (actually the sigret we injected)
+
+    curproc->tf->esp -= 8; // updating esp
+    curproc->tf->eip = (uint)curproc->signal_handlers[i - 1];
+    break;
+  }
+}
+
+void sigret(void)
+{
+  struct proc *curproc = myproc();
+
+  pushcli(); // for interrupts
+
+  memmove(curproc->tf, curproc->userspace_trapframe_backup, sizeof(struct trapframe)); //restoring the backup by updating the tf with the backup we saved in the checkS function
+  curproc->tf->esp = curproc->tf->esp + sizeof(struct trapframe);                      //representing popping out the backup we saved in the stack
+  curproc->signal_mask = curproc->signal_mask_backup;                                  //restoring the mask back to where it was before handling the signal (part of preventing nested user-level signal handling)
+  popcli();
+}
+
+uint sigprocmask(uint sigmask)
+{
+  uint oldmask = myproc()->signal_mask;
+  myproc()->signal_mask = sigmask;
+  return oldmask;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..8d8f3a4 100644
--- a/proc.h
+++ b/proc.h
@@ -32,23 +32,30 @@ struct context {
   uint eip;
 };
 
-enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+enum procstate { UNUSED, NEG_UNUSED, EMBRYO, SLEEPING, NEG_SLEEPING, RUNNABLE, NEG_RUNNABLE, RUNNING, NEG_RUNNING, ZOMBIE, NEG_ZOMBIE };
 
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
-  enum procstate state;        // Process state
+  volatile enum procstate state;        // Process state
   int pid;                     // Process ID
   struct proc *parent;         // Parent process
   struct trapframe *tf;        // Trap frame for current syscall
   struct context *context;     // swtch() here to run process
-  void *chan;                  // If non-zero, sleeping on chan
+  volatile void *chan;                  // If non-zero, sleeping on chan
   int killed;                  // If non-zero, have been killed
+  int stopped;
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint pending_signals;
+  uint signal_mask;
+  uint signal_mask_backup; 
+  struct sigaction* signal_handlers[32];
+  struct trapframe* userspace_trapframe_backup;
+
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +63,9 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+#define SIG_DFL 1
+#define SIG_IGN 1
+#define SIGKILL 9
+#define SIGSTOP 17
+#define SIGCONT 19
+
diff --git a/sanity1.c b/sanity1.c
new file mode 100644
index 0000000..c9c0a47
--- /dev/null
+++ b/sanity1.c
@@ -0,0 +1,38 @@
+#include "types.h"
+#include "user.h"
+#include "stat.h"
+
+
+
+void testUnblockableblock(void)
+{
+    sigprocmask(0xFFFFFFFF);
+    int pid = fork();
+    if(!pid){
+       for(;;) {}
+    }
+    kill(pid, 17);
+    sleep(100);
+    kill(pid, 9);
+    wait();
+    printf(1, "test passed\n");
+    exit();
+}
+
+void testUnblockableKill(void)
+{
+    sigprocmask(0xFFFFFFFF);
+    int pid = fork();
+    if(!pid){
+        for(;;) {}
+    }
+    kill(pid, 9);
+    wait();
+    printf(1, "test passed\n");
+}
+
+int main(int argc, char** argv) {
+    
+    testUnblockableKill();
+    testUnblockableblock();
+}
diff --git a/sanity2.c b/sanity2.c
new file mode 100644
index 0000000..dd89849
--- /dev/null
+++ b/sanity2.c
@@ -0,0 +1,42 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+int signalCount = 0;
+
+void handlerfunc(int signum){
+    printf(1, "user handler %d\n", signalCount);
+    if (signum == 18)
+        printf(1, "got signum: %d\n", signum);
+}
+
+int main(int argc, char** argv) {
+    
+    struct sigaction *sa;
+    memset(&sa, 0, sizeof(sa));
+    sa->sa_handler = &handlerfunc;
+
+    int result = sigaction(18, sa, null);
+    printf(1,"sigaction result: %d\n", result);
+
+    int child_pid = fork();
+
+    if(child_pid == 0)
+    {
+        while (signalCount < 2) {
+            printf(1, "child\n");
+            sleep(30);
+        }
+        exit();
+    }
+    else {
+       //  printf(1, "sending signal number 18\n");
+        sleep(240);
+        kill(child_pid,9);
+        // Wait so the kid gets the sec kill
+        sleep(240);
+        kill(child_pid, 9);
+        wait();
+        printf(1, "Parent done\n");
+        exit();
+    }
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..2cdf880 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,7 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-
+extern int sys_sigprocmask(void);
+extern int sys_sigaction(void);
+extern int sys_sigret(void);
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -126,6 +128,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_sigprocmask] sys_sigprocmask,
+[SYS_sigaction] sys_sigaction,
+[SYS_sigret]  sys_sigret
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..65362cd 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_sigprocmask 22
+#define SYS_sigaction   23
+#define SYS_sigret  24
diff --git a/sysproc.c b/sysproc.c
index 0686d29..b66ae20 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -30,10 +30,14 @@ int
 sys_kill(void)
 {
   int pid;
-
+  int signum;
   if(argint(0, &pid) < 0)
     return -1;
-  return kill(pid);
+  if(argint(1, &signum) < 0)
+    return -1;
+  if(signum<1||signum>32)
+    return -1;
+  return kill(pid, signum);
 }
 
 int
@@ -89,3 +93,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint sys_sigprocmask(void){
+  int sigmask;
+  if(argint(0, &sigmask) < 0)
+    return -1;
+  return sigprocmask((uint) sigmask);
+}
+
+int sys_sigaction(void){
+    int signum;
+    char* act;
+    char* oldact;
+    if(argint(0, &signum) < 0)
+      return -1;
+    if(argptr(1,&act,sizeof(struct sigaction))<0)
+      return -1;
+    if(argptr(2,&oldact,sizeof(struct sigaction))<0)
+      return -1;
+    return sigaction(signum, (const struct sigaction*)act, (struct sigaction*)oldact);
+}
+
+int sys_sigret(void){
+  sigret();
+  return 0;
+}
\ No newline at end of file
diff --git a/trapasm.S b/trapasm.S
index da8aefc..fc6cb80 100644
--- a/trapasm.S
+++ b/trapasm.S
@@ -23,6 +23,9 @@ alltraps:
   # Return falls through to trapret...
 .globl trapret
 trapret:
+  pushl %esp
+  call checkS # this is to check for the pending signals (and of course handle them if needed)
+  addl $4, %esp
   popal
   popl %gs
   popl %fs
diff --git a/types.h b/types.h
index e4adf64..5254337 100644
--- a/types.h
+++ b/types.h
@@ -2,3 +2,9 @@ typedef unsigned int   uint;
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+#define null ((void*) 0)
+
+struct sigaction{
+  void  (*sa_handler)(int);
+  uint  sigmask;
+};
diff --git a/user.h b/user.h
index 4f99c52..e91c998 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct sigaction;
 
 // system calls
 int fork(void);
@@ -9,7 +10,7 @@ int pipe(int*);
 int write(int, const void*, int);
 int read(int, void*, int);
 int close(int);
-int kill(int);
+int kill(int, int);
 int exec(char*, char**);
 int open(const char*, int);
 int mknod(const char*, short, short);
@@ -23,7 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+uint sigprocmask(uint sigmask);
+int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
+void    sigret(void);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/usertests.c b/usertests.c
index a1e97e7..cb49e7a 100644
--- a/usertests.c
+++ b/usertests.c
@@ -390,9 +390,9 @@ preempt(void)
   }
   close(pfds[0]);
   printf(1, "kill... ");
-  kill(pid1);
-  kill(pid2);
-  kill(pid3);
+  kill(pid1,9);
+  kill(pid2,9);
+  kill(pid3,9);
   printf(1, "wait... ");
   wait();
   wait();
@@ -446,7 +446,7 @@ mem(void)
     m1 = malloc(1024*20);
     if(m1 == 0){
       printf(1, "couldn't allocate mem?!!\n");
-      kill(ppid);
+      kill(ppid,9);
       exit();
     }
     free(m1);
@@ -1503,7 +1503,7 @@ sbrktest(void)
     }
     if(pid == 0){
       printf(stdout, "oops could read %x = %x\n", a, *a);
-      kill(ppid);
+      kill(ppid,9);
       exit();
     }
     wait();
@@ -1532,7 +1532,7 @@ sbrktest(void)
   for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
     if(pids[i] == -1)
       continue;
-    kill(pids[i]);
+    kill(pids[i],9);
     wait();
   }
   if(c == (char*)0xffffffff){
@@ -1576,7 +1576,7 @@ validatetest(void)
     }
     sleep(0);
     sleep(0);
-    kill(pid);
+    kill(pid,9);
     wait();
 
     // try to crash the kernel by passing in a bad string pointer
diff --git a/usys.S b/usys.S
index 8bfd8a1..46ae1a2 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,6 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(sigprocmask)
+SYSCALL(sigaction)
+SYSCALL(sigret)
\ No newline at end of file
diff --git a/x86.h b/x86.h
index 07312a5..fdf8c6d 100644
--- a/x86.h
+++ b/x86.h
@@ -181,3 +181,18 @@ struct trapframe {
   ushort ss;
   ushort padding6;
 };
+
+static inline int cas(volatile void *addr, int expected, int newval){
+  int ret;
+    asm volatile("movl %2 , %%eax\n\t"
+                "lock; cmpxchg %3, %0\n\t"
+                "pushfl\n\t"
+                "popl %1\n\t"
+                "and $0x0040, %1\n\t"
+                : "+m" (*(int*)addr), "=r" (ret)
+                : "r" (expected), "r" (newval)
+                : "%eax"
+                );
+    return ret;
+}
+
diff --git a/xv6-rev3.tar.gz b/xv6-rev3.tar.gz
new file mode 100644
index 0000000..5d5a0f8
Binary files /dev/null and b/xv6-rev3.tar.gz differ
